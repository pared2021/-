version: '3.8'

services:
  # ======================
  # 主应用服务
  # ======================
  app:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: gameauto-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://gameauto:gameauto_pass@db:5432/gameauto
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret}
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./templates:/app/templates
      - ./data:/app/data
    depends_on:
      - db
      - redis
    networks:
      - gameauto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ======================
  # PostgreSQL 数据库
  # ======================
  db:
    image: postgres:15-alpine
    container_name: gameauto-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=gameauto
      - POSTGRES_USER=gameauto
      - POSTGRES_PASSWORD=gameauto_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - gameauto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gameauto -d gameauto"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ======================
  # Redis 缓存
  # ======================
  redis:
    image: redis:7-alpine
    container_name: gameauto-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - gameauto-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ======================
  # 开发环境服务
  # ======================
  app-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: gameauto-dev
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://gameauto:gameauto_pass@db:5432/gameauto
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret}
      - DEBUG=true
    volumes:
      - .:/app
      - /app/venv
    depends_on:
      - db
      - redis
    networks:
      - gameauto-network
    command: ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    profiles:
      - dev

  # ======================
  # Nginx 反向代理
  # ======================
  nginx:
    image: nginx:alpine
    container_name: gameauto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - gameauto-network
    profiles:
      - production

  # ======================
  # 监控服务 - Prometheus
  # ======================
  prometheus:
    image: prom/prometheus:latest
    container_name: gameauto-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - gameauto-network
    profiles:
      - monitoring

  # ======================
  # 监控服务 - Grafana
  # ======================
  grafana:
    image: grafana/grafana:latest
    container_name: gameauto-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning
    networks:
      - gameauto-network
    profiles:
      - monitoring

  # ======================
  # 日志聚合 - ELK Stack
  # ======================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: gameauto-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - gameauto-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: gameauto-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - gameauto-network
    profiles:
      - logging

# ======================
# 网络配置
# ======================
networks:
  gameauto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ======================
# 数据卷
# ======================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local 