[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "game-automation"
version = "1.0.0"
description = "智能游戏自动化工具"
authors = [
    {name = "Game Automation Team", email = "team@example.com"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

# 安全扫描配置
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B101", "B102"]
skips = ["B311", "B404", "B603"]

# pytest配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with -m 'not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "system: marks tests as system tests",
    "functional: marks tests as functional tests",
]

# Coverage.py配置
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "*/legacy/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_also = [
    # 调试代码
    "def __repr__",
    "if self\\.debug",
    "if settings\\.DEBUG",
    
    # 异常处理
    "raise AssertionError",
    "raise NotImplementedError",
    "except ImportError:",
    
    # 条件代码
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    
    # 抽象方法
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    
    # 平台特定代码
    "if sys\\.platform",
    "if os\\.name",
]
ignore_errors = true
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

# MyPy类型检查配置
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "numpy.*",
    "torch.*",
    "torchvision.*",
    "PIL.*",
    "win32gui.*",
    "win32con.*",
    "win32api.*",
    "pyautogui.*",
]
ignore_missing_imports = true
