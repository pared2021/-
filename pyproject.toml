[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[project]
name = "game-automation"
version = "3.0.0"
description = "基于Clean Architecture的智能游戏自动化工具，集成dependency-injector依赖注入框架"
authors = [
    {name = "Game Automation Team", email = "team@example.com"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # 桌面自动化核心
    "opencv-python>=4.9.0",
    "opencv-contrib-python>=4.9.0",
    "numpy>=1.26.0",
    "pillow>=10.2.0",
    "scikit-image>=0.22.0",
    "easyocr>=1.7.0",
    
    # 系统自动化控制
    "pyautogui>=0.9.54",
    "pygetwindow>=0.0.9",
    "pynput>=1.7.6",
    "psutil>=5.9.5",
    "mss>=9.0.1",
    "keyboard>=0.13.5",
    "mouse>=0.7.1",
    
    # GUI框架
    "pyqt6>=6.6.0",
    "pyqtgraph>=0.13.3",
    
    # 工具库
    "rich>=13.7.0",
    "tqdm>=4.66.1",
    "pyyaml>=6.0.1",
    "click>=8.1.7",
    "loguru>=0.7.2",
    "dependency-injector>=4.41.0",
    "jedi>=0.19.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "yapf>=0.40.0",
    
    # Web框架和HTTP客户端
    "fastapi>=0.109.0",
    "httpx>=0.26.0",
    "pydantic>=2.5.0",
    "uvicorn[standard]>=0.27.0",
    
    # AI/ML库
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "transformers>=4.37.0",
    
    # Windows特定依赖
    "pywin32>=306; sys_platform == 'win32'",
    
    # GPU监控
    "GPUtil>=1.4.0",
]

# 项目脚本
[project.scripts]
game-automation = "src.main:main"
qa-check = "tools.quality.analyzer:main"
qa-simple = "tools.quality.simple_check:main"

# 可选依赖组
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
]
lint = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

# 安全扫描配置
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B101", "B102"]
skips = ["B311", "B404", "B603"]

# pytest配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with -m 'not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "system: marks tests as system tests",
    "functional: marks tests as functional tests",
]

# Coverage.py配置
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "*/legacy/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_also = [
    # 调试代码
    "def __repr__",
    "if self\\.debug",
    "if settings\\.DEBUG",
    
    # 异常处理
    "raise AssertionError",
    "raise NotImplementedError",
    "except ImportError:",
    
    # 条件代码
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    
    # 抽象方法
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    
    # 平台特定代码
    "if sys\\.platform",
    "if os\\.name",
]
ignore_errors = true
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

# MyPy类型检查配置
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "numpy.*",
    "torch.*",
    "torchvision.*",
    "PIL.*",
    "win32gui.*",
    "win32con.*",
    "win32api.*",
    "pyautogui.*",
]
ignore_missing_imports = true
